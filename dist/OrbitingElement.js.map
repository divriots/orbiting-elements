{"version":3,"sourceRoot":"/source_map/","sources":["src/OrbitingElement.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,IAAI,EAAE,GAAG,EAAE,UAAU,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE3C,MAAM,GAAG,GAAG,CAAC,MAAc,EAAE,KAAa,EAAE,KAAa,EAAE,MAAc,EAAE,MAAc,EAAU,EAAE;IACnG,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC;AACzE,CAAC,CAAA;AAED,MAAM,OAAO,eAAgB,SAAQ,UAAU;IAA/C;;QAC8E,aAAQ,GAAG,CAAC,CAAC;QACZ,gBAAW,GAAG,MAAM,CAAC;IAoEpG,CAAC;IApBC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAES,iBAAiB;QACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAChE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAClE,CAAC;IAES,mBAAmB;QAC3B,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,eAAe,CAAC;IAC7B,CAAC;;AA3DM,sBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsClB,CAAC;AA/CmE;IAApE,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;;iDAAqB;AACnB;IAArE,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC;;oDAA6B;AACvD;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;8CAAc;AACb;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;+CAAe;AACM;IAA9D,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;;sDAAsB;AACzC;IAA1C,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;kDAAkB","sourcesContent":["import {html, css, LitElement} from 'lit';\r\nimport {property} from 'lit/decorators.js';\r\n\r\nconst map = (number: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {\r\n  return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\r\n}\r\n\r\nexport class OrbitingElement extends LitElement {\r\n  @property({ type: Number, reflect: true, attribute: \"float-speed\" }) public floatDur = 5;\r\n  @property({ type: String, reflect: true, attribute: \"float-amount\" }) public floatAmount = '20px';\r\n  @property({ type: Number, reflect: true }) public angle;\r\n  @property({ type: Number, reflect: true }) public radius;\r\n  @property({ type: Number, reflect: true, attribute: \"speed\" }) public rotationSpeed;\r\n  @property({ type: Number, reflect: true }) public direction;\r\n\r\n  public radian: number;\r\n\r\n  static styles = css`\r\n    :host {\r\n      width: 75px;\r\n      height: 75px;\r\n      opacity: 0;\r\n      transition: opacity 0.7s ease-in-out;\r\n      animation: float var(--float-duration) ease-in-out infinite;\r\n      --orbiting-element-shadow-color: rgba(0,0,0,0.7); \r\n    }\r\n\r\n    :host(.visible) {\r\n      opacity: 1;\r\n    }\r\n\r\n    :host(:hover) ::slotted(svg) {\r\n      transform: scale(1.5);\r\n      filter: none;\r\n    }\r\n\r\n    ::slotted(svg) {\r\n      filter: grayscale();\r\n      transition: all 0.3s ease-in-out;\r\n    }\r\n\r\n    @keyframes float {\r\n      0% {\r\n        filter: drop-shadow(0px 5px 2px var(--orbiting-element-shadow-color));\r\n        transform: translatey(0px);\r\n      }\r\n      50% {\r\n        filter: drop-shadow(0px calc(5px + var(--float-amount)) calc(2px + var(--float-amount) / 6) var(--orbiting-element-shadow-color));\r\n        transform: translatey(calc(-1 * var(--float-amount)));\r\n      }\r\n      100% {\r\n        filter: drop-shadow(0px 5px 2px var(--orbiting-element-shadow-color));\r\n        transform: translatey(0px);\r\n      }\r\n    }\r\n  `;\r\n\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n    this.setCustomCSSProps();\r\n    this.randomAppearVisible();\r\n  }\r\n\r\n  protected setCustomCSSProps() {\r\n    this.style.setProperty('--float-duration', `${this.floatDur}s`);\r\n    this.style.setProperty('--float-amount', `${this.floatAmount}`);\r\n  }\r\n\r\n  protected randomAppearVisible() {\r\n    setTimeout(() => {\r\n      this.classList.add('visible');\r\n    }, Math.random() * 500);\r\n  }\r\n\r\n  render() {\r\n    return html`<slot></slot>`;\r\n  }\r\n}"]}